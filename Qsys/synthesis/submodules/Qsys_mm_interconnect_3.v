// Qsys_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Qsys_mm_interconnect_3 (
		input  wire        clk_0_clk_clk,                                                   //                                                 clk_0_clk.clk
		input  wire        mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset, // mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset.reset
		input  wire [5:0]  mm_clock_crossing_bridge_0_m0_address,                           //                             mm_clock_crossing_bridge_0_m0.address
		output wire        mm_clock_crossing_bridge_0_m0_waitrequest,                       //                                                          .waitrequest
		input  wire [0:0]  mm_clock_crossing_bridge_0_m0_burstcount,                        //                                                          .burstcount
		input  wire [3:0]  mm_clock_crossing_bridge_0_m0_byteenable,                        //                                                          .byteenable
		input  wire        mm_clock_crossing_bridge_0_m0_read,                              //                                                          .read
		output wire [31:0] mm_clock_crossing_bridge_0_m0_readdata,                          //                                                          .readdata
		output wire        mm_clock_crossing_bridge_0_m0_readdatavalid,                     //                                                          .readdatavalid
		input  wire        mm_clock_crossing_bridge_0_m0_write,                             //                                                          .write
		input  wire [31:0] mm_clock_crossing_bridge_0_m0_writedata,                         //                                                          .writedata
		input  wire        mm_clock_crossing_bridge_0_m0_debugaccess,                       //                                                          .debugaccess
		output wire [0:0]  adc_ltc2308_0_slave_address,                                     //                                       adc_ltc2308_0_slave.address
		output wire        adc_ltc2308_0_slave_write,                                       //                                                          .write
		output wire        adc_ltc2308_0_slave_read,                                        //                                                          .read
		input  wire [15:0] adc_ltc2308_0_slave_readdata,                                    //                                                          .readdata
		output wire [15:0] adc_ltc2308_0_slave_writedata,                                   //                                                          .writedata
		output wire        adc_ltc2308_0_slave_chipselect,                                  //                                                          .chipselect
		output wire [1:0]  esp32_io_s1_address,                                             //                                               esp32_io_s1.address
		input  wire [31:0] esp32_io_s1_readdata,                                            //                                                          .readdata
		output wire        ir_rx_avalon_slave_write,                                        //                                        ir_rx_avalon_slave.write
		output wire        ir_rx_avalon_slave_read,                                         //                                                          .read
		input  wire [31:0] ir_rx_avalon_slave_readdata,                                     //                                                          .readdata
		output wire [31:0] ir_rx_avalon_slave_writedata,                                    //                                                          .writedata
		output wire        ir_rx_avalon_slave_chipselect,                                   //                                                          .chipselect
		output wire [1:0]  LED_s1_address,                                                  //                                                    LED_s1.address
		output wire        LED_s1_write,                                                    //                                                          .write
		input  wire [31:0] LED_s1_readdata,                                                 //                                                          .readdata
		output wire [31:0] LED_s1_writedata,                                                //                                                          .writedata
		output wire        LED_s1_chipselect,                                               //                                                          .chipselect
		output wire [1:0]  sw_s1_address,                                                   //                                                     sw_s1.address
		input  wire [31:0] sw_s1_readdata                                                   //                                                          .readdata
	);

	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_clock_crossing_bridge_0_m0_agent:av_waitrequest -> mm_clock_crossing_bridge_0_m0_translator:uav_waitrequest
	wire  [31:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_clock_crossing_bridge_0_m0_agent:av_readdata -> mm_clock_crossing_bridge_0_m0_translator:uav_readdata
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_clock_crossing_bridge_0_m0_translator:uav_debugaccess -> mm_clock_crossing_bridge_0_m0_agent:av_debugaccess
	wire   [5:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_clock_crossing_bridge_0_m0_translator:uav_address -> mm_clock_crossing_bridge_0_m0_agent:av_address
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_clock_crossing_bridge_0_m0_translator:uav_read -> mm_clock_crossing_bridge_0_m0_agent:av_read
	wire   [3:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_clock_crossing_bridge_0_m0_translator:uav_byteenable -> mm_clock_crossing_bridge_0_m0_agent:av_byteenable
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_clock_crossing_bridge_0_m0_agent:av_readdatavalid -> mm_clock_crossing_bridge_0_m0_translator:uav_readdatavalid
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_clock_crossing_bridge_0_m0_translator:uav_lock -> mm_clock_crossing_bridge_0_m0_agent:av_lock
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_clock_crossing_bridge_0_m0_translator:uav_write -> mm_clock_crossing_bridge_0_m0_agent:av_write
	wire  [31:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_clock_crossing_bridge_0_m0_translator:uav_writedata -> mm_clock_crossing_bridge_0_m0_agent:av_writedata
	wire   [2:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_clock_crossing_bridge_0_m0_translator:uav_burstcount -> mm_clock_crossing_bridge_0_m0_agent:av_burstcount
	wire  [31:0] ir_rx_avalon_slave_agent_m0_readdata;                                             // ir_rx_avalon_slave_translator:uav_readdata -> ir_rx_avalon_slave_agent:m0_readdata
	wire         ir_rx_avalon_slave_agent_m0_waitrequest;                                          // ir_rx_avalon_slave_translator:uav_waitrequest -> ir_rx_avalon_slave_agent:m0_waitrequest
	wire         ir_rx_avalon_slave_agent_m0_debugaccess;                                          // ir_rx_avalon_slave_agent:m0_debugaccess -> ir_rx_avalon_slave_translator:uav_debugaccess
	wire   [5:0] ir_rx_avalon_slave_agent_m0_address;                                              // ir_rx_avalon_slave_agent:m0_address -> ir_rx_avalon_slave_translator:uav_address
	wire   [3:0] ir_rx_avalon_slave_agent_m0_byteenable;                                           // ir_rx_avalon_slave_agent:m0_byteenable -> ir_rx_avalon_slave_translator:uav_byteenable
	wire         ir_rx_avalon_slave_agent_m0_read;                                                 // ir_rx_avalon_slave_agent:m0_read -> ir_rx_avalon_slave_translator:uav_read
	wire         ir_rx_avalon_slave_agent_m0_readdatavalid;                                        // ir_rx_avalon_slave_translator:uav_readdatavalid -> ir_rx_avalon_slave_agent:m0_readdatavalid
	wire         ir_rx_avalon_slave_agent_m0_lock;                                                 // ir_rx_avalon_slave_agent:m0_lock -> ir_rx_avalon_slave_translator:uav_lock
	wire  [31:0] ir_rx_avalon_slave_agent_m0_writedata;                                            // ir_rx_avalon_slave_agent:m0_writedata -> ir_rx_avalon_slave_translator:uav_writedata
	wire         ir_rx_avalon_slave_agent_m0_write;                                                // ir_rx_avalon_slave_agent:m0_write -> ir_rx_avalon_slave_translator:uav_write
	wire   [2:0] ir_rx_avalon_slave_agent_m0_burstcount;                                           // ir_rx_avalon_slave_agent:m0_burstcount -> ir_rx_avalon_slave_translator:uav_burstcount
	wire         ir_rx_avalon_slave_agent_rf_source_valid;                                         // ir_rx_avalon_slave_agent:rf_source_valid -> ir_rx_avalon_slave_agent_rsp_fifo:in_valid
	wire  [80:0] ir_rx_avalon_slave_agent_rf_source_data;                                          // ir_rx_avalon_slave_agent:rf_source_data -> ir_rx_avalon_slave_agent_rsp_fifo:in_data
	wire         ir_rx_avalon_slave_agent_rf_source_ready;                                         // ir_rx_avalon_slave_agent_rsp_fifo:in_ready -> ir_rx_avalon_slave_agent:rf_source_ready
	wire         ir_rx_avalon_slave_agent_rf_source_startofpacket;                                 // ir_rx_avalon_slave_agent:rf_source_startofpacket -> ir_rx_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         ir_rx_avalon_slave_agent_rf_source_endofpacket;                                   // ir_rx_avalon_slave_agent:rf_source_endofpacket -> ir_rx_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         ir_rx_avalon_slave_agent_rsp_fifo_out_valid;                                      // ir_rx_avalon_slave_agent_rsp_fifo:out_valid -> ir_rx_avalon_slave_agent:rf_sink_valid
	wire  [80:0] ir_rx_avalon_slave_agent_rsp_fifo_out_data;                                       // ir_rx_avalon_slave_agent_rsp_fifo:out_data -> ir_rx_avalon_slave_agent:rf_sink_data
	wire         ir_rx_avalon_slave_agent_rsp_fifo_out_ready;                                      // ir_rx_avalon_slave_agent:rf_sink_ready -> ir_rx_avalon_slave_agent_rsp_fifo:out_ready
	wire         ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket;                              // ir_rx_avalon_slave_agent_rsp_fifo:out_startofpacket -> ir_rx_avalon_slave_agent:rf_sink_startofpacket
	wire         ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket;                                // ir_rx_avalon_slave_agent_rsp_fifo:out_endofpacket -> ir_rx_avalon_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> ir_rx_avalon_slave_agent:cp_valid
	wire  [79:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> ir_rx_avalon_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                // ir_rx_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [4:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> ir_rx_avalon_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> ir_rx_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> ir_rx_avalon_slave_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                         // LED_s1_translator:uav_readdata -> LED_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                                      // LED_s1_translator:uav_waitrequest -> LED_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                                      // LED_s1_agent:m0_debugaccess -> LED_s1_translator:uav_debugaccess
	wire   [5:0] led_s1_agent_m0_address;                                                          // LED_s1_agent:m0_address -> LED_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                                       // LED_s1_agent:m0_byteenable -> LED_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                             // LED_s1_agent:m0_read -> LED_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                                    // LED_s1_translator:uav_readdatavalid -> LED_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                             // LED_s1_agent:m0_lock -> LED_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                                        // LED_s1_agent:m0_writedata -> LED_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                            // LED_s1_agent:m0_write -> LED_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                                       // LED_s1_agent:m0_burstcount -> LED_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                                     // LED_s1_agent:rf_source_valid -> LED_s1_agent_rsp_fifo:in_valid
	wire  [80:0] led_s1_agent_rf_source_data;                                                      // LED_s1_agent:rf_source_data -> LED_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                                     // LED_s1_agent_rsp_fifo:in_ready -> LED_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                             // LED_s1_agent:rf_source_startofpacket -> LED_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                               // LED_s1_agent:rf_source_endofpacket -> LED_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                                  // LED_s1_agent_rsp_fifo:out_valid -> LED_s1_agent:rf_sink_valid
	wire  [80:0] led_s1_agent_rsp_fifo_out_data;                                                   // LED_s1_agent_rsp_fifo:out_data -> LED_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                                  // LED_s1_agent:rf_sink_ready -> LED_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                          // LED_s1_agent_rsp_fifo:out_startofpacket -> LED_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                            // LED_s1_agent_rsp_fifo:out_endofpacket -> LED_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> LED_s1_agent:cp_valid
	wire  [79:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> LED_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                            // LED_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [4:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> LED_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> LED_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> LED_s1_agent:cp_endofpacket
	wire  [31:0] esp32_io_s1_agent_m0_readdata;                                                    // esp32_io_s1_translator:uav_readdata -> esp32_io_s1_agent:m0_readdata
	wire         esp32_io_s1_agent_m0_waitrequest;                                                 // esp32_io_s1_translator:uav_waitrequest -> esp32_io_s1_agent:m0_waitrequest
	wire         esp32_io_s1_agent_m0_debugaccess;                                                 // esp32_io_s1_agent:m0_debugaccess -> esp32_io_s1_translator:uav_debugaccess
	wire   [5:0] esp32_io_s1_agent_m0_address;                                                     // esp32_io_s1_agent:m0_address -> esp32_io_s1_translator:uav_address
	wire   [3:0] esp32_io_s1_agent_m0_byteenable;                                                  // esp32_io_s1_agent:m0_byteenable -> esp32_io_s1_translator:uav_byteenable
	wire         esp32_io_s1_agent_m0_read;                                                        // esp32_io_s1_agent:m0_read -> esp32_io_s1_translator:uav_read
	wire         esp32_io_s1_agent_m0_readdatavalid;                                               // esp32_io_s1_translator:uav_readdatavalid -> esp32_io_s1_agent:m0_readdatavalid
	wire         esp32_io_s1_agent_m0_lock;                                                        // esp32_io_s1_agent:m0_lock -> esp32_io_s1_translator:uav_lock
	wire  [31:0] esp32_io_s1_agent_m0_writedata;                                                   // esp32_io_s1_agent:m0_writedata -> esp32_io_s1_translator:uav_writedata
	wire         esp32_io_s1_agent_m0_write;                                                       // esp32_io_s1_agent:m0_write -> esp32_io_s1_translator:uav_write
	wire   [2:0] esp32_io_s1_agent_m0_burstcount;                                                  // esp32_io_s1_agent:m0_burstcount -> esp32_io_s1_translator:uav_burstcount
	wire         esp32_io_s1_agent_rf_source_valid;                                                // esp32_io_s1_agent:rf_source_valid -> esp32_io_s1_agent_rsp_fifo:in_valid
	wire  [80:0] esp32_io_s1_agent_rf_source_data;                                                 // esp32_io_s1_agent:rf_source_data -> esp32_io_s1_agent_rsp_fifo:in_data
	wire         esp32_io_s1_agent_rf_source_ready;                                                // esp32_io_s1_agent_rsp_fifo:in_ready -> esp32_io_s1_agent:rf_source_ready
	wire         esp32_io_s1_agent_rf_source_startofpacket;                                        // esp32_io_s1_agent:rf_source_startofpacket -> esp32_io_s1_agent_rsp_fifo:in_startofpacket
	wire         esp32_io_s1_agent_rf_source_endofpacket;                                          // esp32_io_s1_agent:rf_source_endofpacket -> esp32_io_s1_agent_rsp_fifo:in_endofpacket
	wire         esp32_io_s1_agent_rsp_fifo_out_valid;                                             // esp32_io_s1_agent_rsp_fifo:out_valid -> esp32_io_s1_agent:rf_sink_valid
	wire  [80:0] esp32_io_s1_agent_rsp_fifo_out_data;                                              // esp32_io_s1_agent_rsp_fifo:out_data -> esp32_io_s1_agent:rf_sink_data
	wire         esp32_io_s1_agent_rsp_fifo_out_ready;                                             // esp32_io_s1_agent:rf_sink_ready -> esp32_io_s1_agent_rsp_fifo:out_ready
	wire         esp32_io_s1_agent_rsp_fifo_out_startofpacket;                                     // esp32_io_s1_agent_rsp_fifo:out_startofpacket -> esp32_io_s1_agent:rf_sink_startofpacket
	wire         esp32_io_s1_agent_rsp_fifo_out_endofpacket;                                       // esp32_io_s1_agent_rsp_fifo:out_endofpacket -> esp32_io_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> esp32_io_s1_agent:cp_valid
	wire  [79:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> esp32_io_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                            // esp32_io_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [4:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> esp32_io_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> esp32_io_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> esp32_io_s1_agent:cp_endofpacket
	wire  [31:0] sw_s1_agent_m0_readdata;                                                          // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire         sw_s1_agent_m0_waitrequest;                                                       // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire         sw_s1_agent_m0_debugaccess;                                                       // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [5:0] sw_s1_agent_m0_address;                                                           // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire   [3:0] sw_s1_agent_m0_byteenable;                                                        // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire         sw_s1_agent_m0_read;                                                              // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire         sw_s1_agent_m0_readdatavalid;                                                     // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire         sw_s1_agent_m0_lock;                                                              // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire  [31:0] sw_s1_agent_m0_writedata;                                                         // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire         sw_s1_agent_m0_write;                                                             // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire   [2:0] sw_s1_agent_m0_burstcount;                                                        // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire         sw_s1_agent_rf_source_valid;                                                      // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [80:0] sw_s1_agent_rf_source_data;                                                       // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire         sw_s1_agent_rf_source_ready;                                                      // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire         sw_s1_agent_rf_source_startofpacket;                                              // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire         sw_s1_agent_rf_source_endofpacket;                                                // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire         sw_s1_agent_rsp_fifo_out_valid;                                                   // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [80:0] sw_s1_agent_rsp_fifo_out_data;                                                    // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire         sw_s1_agent_rsp_fifo_out_ready;                                                   // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire         sw_s1_agent_rsp_fifo_out_startofpacket;                                           // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire         sw_s1_agent_rsp_fifo_out_endofpacket;                                             // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> sw_s1_agent:cp_valid
	wire  [79:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> sw_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                            // sw_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [4:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> sw_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire  [31:0] adc_ltc2308_0_slave_agent_m0_readdata;                                            // adc_ltc2308_0_slave_translator:uav_readdata -> adc_ltc2308_0_slave_agent:m0_readdata
	wire         adc_ltc2308_0_slave_agent_m0_waitrequest;                                         // adc_ltc2308_0_slave_translator:uav_waitrequest -> adc_ltc2308_0_slave_agent:m0_waitrequest
	wire         adc_ltc2308_0_slave_agent_m0_debugaccess;                                         // adc_ltc2308_0_slave_agent:m0_debugaccess -> adc_ltc2308_0_slave_translator:uav_debugaccess
	wire   [5:0] adc_ltc2308_0_slave_agent_m0_address;                                             // adc_ltc2308_0_slave_agent:m0_address -> adc_ltc2308_0_slave_translator:uav_address
	wire   [3:0] adc_ltc2308_0_slave_agent_m0_byteenable;                                          // adc_ltc2308_0_slave_agent:m0_byteenable -> adc_ltc2308_0_slave_translator:uav_byteenable
	wire         adc_ltc2308_0_slave_agent_m0_read;                                                // adc_ltc2308_0_slave_agent:m0_read -> adc_ltc2308_0_slave_translator:uav_read
	wire         adc_ltc2308_0_slave_agent_m0_readdatavalid;                                       // adc_ltc2308_0_slave_translator:uav_readdatavalid -> adc_ltc2308_0_slave_agent:m0_readdatavalid
	wire         adc_ltc2308_0_slave_agent_m0_lock;                                                // adc_ltc2308_0_slave_agent:m0_lock -> adc_ltc2308_0_slave_translator:uav_lock
	wire  [31:0] adc_ltc2308_0_slave_agent_m0_writedata;                                           // adc_ltc2308_0_slave_agent:m0_writedata -> adc_ltc2308_0_slave_translator:uav_writedata
	wire         adc_ltc2308_0_slave_agent_m0_write;                                               // adc_ltc2308_0_slave_agent:m0_write -> adc_ltc2308_0_slave_translator:uav_write
	wire   [2:0] adc_ltc2308_0_slave_agent_m0_burstcount;                                          // adc_ltc2308_0_slave_agent:m0_burstcount -> adc_ltc2308_0_slave_translator:uav_burstcount
	wire         adc_ltc2308_0_slave_agent_rf_source_valid;                                        // adc_ltc2308_0_slave_agent:rf_source_valid -> adc_ltc2308_0_slave_agent_rsp_fifo:in_valid
	wire  [80:0] adc_ltc2308_0_slave_agent_rf_source_data;                                         // adc_ltc2308_0_slave_agent:rf_source_data -> adc_ltc2308_0_slave_agent_rsp_fifo:in_data
	wire         adc_ltc2308_0_slave_agent_rf_source_ready;                                        // adc_ltc2308_0_slave_agent_rsp_fifo:in_ready -> adc_ltc2308_0_slave_agent:rf_source_ready
	wire         adc_ltc2308_0_slave_agent_rf_source_startofpacket;                                // adc_ltc2308_0_slave_agent:rf_source_startofpacket -> adc_ltc2308_0_slave_agent_rsp_fifo:in_startofpacket
	wire         adc_ltc2308_0_slave_agent_rf_source_endofpacket;                                  // adc_ltc2308_0_slave_agent:rf_source_endofpacket -> adc_ltc2308_0_slave_agent_rsp_fifo:in_endofpacket
	wire         adc_ltc2308_0_slave_agent_rsp_fifo_out_valid;                                     // adc_ltc2308_0_slave_agent_rsp_fifo:out_valid -> adc_ltc2308_0_slave_agent:rf_sink_valid
	wire  [80:0] adc_ltc2308_0_slave_agent_rsp_fifo_out_data;                                      // adc_ltc2308_0_slave_agent_rsp_fifo:out_data -> adc_ltc2308_0_slave_agent:rf_sink_data
	wire         adc_ltc2308_0_slave_agent_rsp_fifo_out_ready;                                     // adc_ltc2308_0_slave_agent:rf_sink_ready -> adc_ltc2308_0_slave_agent_rsp_fifo:out_ready
	wire         adc_ltc2308_0_slave_agent_rsp_fifo_out_startofpacket;                             // adc_ltc2308_0_slave_agent_rsp_fifo:out_startofpacket -> adc_ltc2308_0_slave_agent:rf_sink_startofpacket
	wire         adc_ltc2308_0_slave_agent_rsp_fifo_out_endofpacket;                               // adc_ltc2308_0_slave_agent_rsp_fifo:out_endofpacket -> adc_ltc2308_0_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> adc_ltc2308_0_slave_agent:cp_valid
	wire  [79:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> adc_ltc2308_0_slave_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                            // adc_ltc2308_0_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [4:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> adc_ltc2308_0_slave_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> adc_ltc2308_0_slave_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> adc_ltc2308_0_slave_agent:cp_endofpacket
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_valid;                                     // mm_clock_crossing_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [79:0] mm_clock_crossing_bridge_0_m0_agent_cp_data;                                      // mm_clock_crossing_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_clock_crossing_bridge_0_m0_agent:cp_ready
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket;                             // mm_clock_crossing_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket;                               // mm_clock_crossing_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         ir_rx_avalon_slave_agent_rp_valid;                                                // ir_rx_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [79:0] ir_rx_avalon_slave_agent_rp_data;                                                 // ir_rx_avalon_slave_agent:rp_data -> router_001:sink_data
	wire         ir_rx_avalon_slave_agent_rp_ready;                                                // router_001:sink_ready -> ir_rx_avalon_slave_agent:rp_ready
	wire         ir_rx_avalon_slave_agent_rp_startofpacket;                                        // ir_rx_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         ir_rx_avalon_slave_agent_rp_endofpacket;                                          // ir_rx_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                             // router_001:src_valid -> rsp_demux:sink_valid
	wire  [79:0] router_001_src_data;                                                              // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                             // rsp_demux:sink_ready -> router_001:src_ready
	wire   [4:0] router_001_src_channel;                                                           // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                            // LED_s1_agent:rp_valid -> router_002:sink_valid
	wire  [79:0] led_s1_agent_rp_data;                                                             // LED_s1_agent:rp_data -> router_002:sink_data
	wire         led_s1_agent_rp_ready;                                                            // router_002:sink_ready -> LED_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                                    // LED_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                                      // LED_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                             // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [79:0] router_002_src_data;                                                              // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                             // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [4:0] router_002_src_channel;                                                           // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         esp32_io_s1_agent_rp_valid;                                                       // esp32_io_s1_agent:rp_valid -> router_003:sink_valid
	wire  [79:0] esp32_io_s1_agent_rp_data;                                                        // esp32_io_s1_agent:rp_data -> router_003:sink_data
	wire         esp32_io_s1_agent_rp_ready;                                                       // router_003:sink_ready -> esp32_io_s1_agent:rp_ready
	wire         esp32_io_s1_agent_rp_startofpacket;                                               // esp32_io_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         esp32_io_s1_agent_rp_endofpacket;                                                 // esp32_io_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [79:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                             // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [4:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         sw_s1_agent_rp_valid;                                                             // sw_s1_agent:rp_valid -> router_004:sink_valid
	wire  [79:0] sw_s1_agent_rp_data;                                                              // sw_s1_agent:rp_data -> router_004:sink_data
	wire         sw_s1_agent_rp_ready;                                                             // router_004:sink_ready -> sw_s1_agent:rp_ready
	wire         sw_s1_agent_rp_startofpacket;                                                     // sw_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         sw_s1_agent_rp_endofpacket;                                                       // sw_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [79:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                             // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [4:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         adc_ltc2308_0_slave_agent_rp_valid;                                               // adc_ltc2308_0_slave_agent:rp_valid -> router_005:sink_valid
	wire  [79:0] adc_ltc2308_0_slave_agent_rp_data;                                                // adc_ltc2308_0_slave_agent:rp_data -> router_005:sink_data
	wire         adc_ltc2308_0_slave_agent_rp_ready;                                               // router_005:sink_ready -> adc_ltc2308_0_slave_agent:rp_ready
	wire         adc_ltc2308_0_slave_agent_rp_startofpacket;                                       // adc_ltc2308_0_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         adc_ltc2308_0_slave_agent_rp_endofpacket;                                         // adc_ltc2308_0_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [79:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                             // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [4:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_src_valid;                                                                 // router:src_valid -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_valid
	wire  [79:0] router_src_data;                                                                  // router:src_data -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                                 // mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [4:0] router_src_channel;                                                               // router:src_channel -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                         // router:src_startofpacket -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                           // router:src_endofpacket -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [79:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data;                               // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_clock_crossing_bridge_0_m0_limiter:cmd_src_ready
	wire   [4:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel;                            // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_valid
	wire  [79:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                // mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [4:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid;                              // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_valid -> mm_clock_crossing_bridge_0_m0_agent:rp_valid
	wire  [79:0] mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data;                               // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_data -> mm_clock_crossing_bridge_0_m0_agent:rp_data
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready;                              // mm_clock_crossing_bridge_0_m0_agent:rp_ready -> mm_clock_crossing_bridge_0_m0_limiter:rsp_src_ready
	wire   [4:0] mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel;                            // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_channel -> mm_clock_crossing_bridge_0_m0_agent:rp_channel
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_clock_crossing_bridge_0_m0_agent:rp_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_clock_crossing_bridge_0_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [79:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [4:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [79:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [4:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [79:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [4:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [79:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [4:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [79:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [4:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [79:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [4:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [79:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [4:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [79:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [4:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [79:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [4:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [79:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [4:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire   [4:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data;                             // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         ir_rx_avalon_slave_agent_rdata_fifo_src_valid;                                    // ir_rx_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] ir_rx_avalon_slave_agent_rdata_fifo_src_data;                                     // ir_rx_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         ir_rx_avalon_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter:in_0_ready -> ir_rx_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> ir_rx_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> ir_rx_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                    // ir_rx_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> ir_rx_avalon_slave_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                                // LED_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                                 // LED_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_001:in_0_ready -> LED_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> LED_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> LED_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                // LED_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> LED_s1_agent:rdata_fifo_sink_error
	wire         esp32_io_s1_agent_rdata_fifo_src_valid;                                           // esp32_io_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] esp32_io_s1_agent_rdata_fifo_src_data;                                            // esp32_io_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         esp32_io_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_002:in_0_ready -> esp32_io_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> esp32_io_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> esp32_io_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                // esp32_io_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> esp32_io_s1_agent:rdata_fifo_sink_error
	wire         sw_s1_agent_rdata_fifo_src_valid;                                                 // sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] sw_s1_agent_rdata_fifo_src_data;                                                  // sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         sw_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_003:in_0_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire         adc_ltc2308_0_slave_agent_rdata_fifo_src_valid;                                   // adc_ltc2308_0_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] adc_ltc2308_0_slave_agent_rdata_fifo_src_data;                                    // adc_ltc2308_0_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         adc_ltc2308_0_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_004:in_0_ready -> adc_ltc2308_0_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> adc_ltc2308_0_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> adc_ltc2308_0_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                // adc_ltc2308_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> adc_ltc2308_0_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (6),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_clock_crossing_bridge_0_m0_translator (
		.clk                    (clk_0_clk_clk),                                                                    //                       clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_clock_crossing_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_clock_crossing_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_clock_crossing_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_clock_crossing_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_clock_crossing_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_clock_crossing_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_clock_crossing_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_clock_crossing_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_clock_crossing_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (2),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ir_rx_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ir_rx_avalon_slave_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ir_rx_avalon_slave_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ir_rx_avalon_slave_agent_m0_read),                                //                         .read
		.uav_write              (ir_rx_avalon_slave_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ir_rx_avalon_slave_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ir_rx_avalon_slave_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ir_rx_avalon_slave_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ir_rx_avalon_slave_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ir_rx_avalon_slave_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ir_rx_avalon_slave_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ir_rx_avalon_slave_agent_m0_debugaccess),                         //                         .debugaccess
		.av_write               (ir_rx_avalon_slave_write),                                        //      avalon_anti_slave_0.write
		.av_read                (ir_rx_avalon_slave_read),                                         //                         .read
		.av_readdata            (ir_rx_avalon_slave_readdata),                                     //                         .readdata
		.av_writedata           (ir_rx_avalon_slave_writedata),                                    //                         .writedata
		.av_chipselect          (ir_rx_avalon_slave_chipselect),                                   //                         .chipselect
		.av_address             (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                                         // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                                      //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                            //                         .read
		.uav_write              (led_s1_agent_m0_write),                                           //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                                     //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                                   //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                                      //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                                        //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                                       //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                            //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                                     //                         .debugaccess
		.av_address             (LED_s1_address),                                                  //      avalon_anti_slave_0.address
		.av_write               (LED_s1_write),                                                    //                         .write
		.av_readdata            (LED_s1_readdata),                                                 //                         .readdata
		.av_writedata           (LED_s1_writedata),                                                //                         .writedata
		.av_chipselect          (LED_s1_chipselect),                                               //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) esp32_io_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (esp32_io_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (esp32_io_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (esp32_io_s1_agent_m0_read),                                       //                         .read
		.uav_write              (esp32_io_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (esp32_io_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (esp32_io_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (esp32_io_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (esp32_io_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (esp32_io_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (esp32_io_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (esp32_io_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (esp32_io_s1_address),                                             //      avalon_anti_slave_0.address
		.av_readdata            (esp32_io_s1_readdata),                                            //                         .readdata
		.av_write               (),                                                                //              (terminated)
		.av_read                (),                                                                //              (terminated)
		.av_writedata           (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                                          // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                                       //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                                             //                         .read
		.uav_write              (sw_s1_agent_m0_write),                                            //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                                      //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                                    //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                                       //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                                         //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                                        //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                                             //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                                      //                         .debugaccess
		.av_address             (sw_s1_address),                                                   //      avalon_anti_slave_0.address
		.av_readdata            (sw_s1_readdata),                                                  //                         .readdata
		.av_write               (),                                                                //              (terminated)
		.av_read                (),                                                                //              (terminated)
		.av_writedata           (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_ltc2308_0_slave_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_ltc2308_0_slave_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (adc_ltc2308_0_slave_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (adc_ltc2308_0_slave_agent_m0_read),                               //                         .read
		.uav_write              (adc_ltc2308_0_slave_agent_m0_write),                              //                         .write
		.uav_waitrequest        (adc_ltc2308_0_slave_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (adc_ltc2308_0_slave_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (adc_ltc2308_0_slave_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (adc_ltc2308_0_slave_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (adc_ltc2308_0_slave_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (adc_ltc2308_0_slave_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (adc_ltc2308_0_slave_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (adc_ltc2308_0_slave_address),                                     //      avalon_anti_slave_0.address
		.av_write               (adc_ltc2308_0_slave_write),                                       //                         .write
		.av_read                (adc_ltc2308_0_slave_read),                                        //                         .read
		.av_readdata            (adc_ltc2308_0_slave_readdata),                                    //                         .readdata
		.av_writedata           (adc_ltc2308_0_slave_writedata),                                   //                         .writedata
		.av_chipselect          (adc_ltc2308_0_slave_chipselect),                                  //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_QOS_H                 (60),
		.PKT_QOS_L                 (60),
		.PKT_DATA_SIDEBAND_H       (58),
		.PKT_DATA_SIDEBAND_L       (58),
		.PKT_ADDR_SIDEBAND_H       (57),
		.PKT_ADDR_SIDEBAND_L       (57),
		.PKT_BURST_TYPE_H          (56),
		.PKT_BURST_TYPE_L          (55),
		.PKT_CACHE_H               (74),
		.PKT_CACHE_L               (71),
		.PKT_THREAD_ID_H           (67),
		.PKT_THREAD_ID_L           (67),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_EXCLUSIVE       (47),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_clock_crossing_bridge_0_m0_agent (
		.clk                   (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                 (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_clock_crossing_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_clock_crossing_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_clock_crossing_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ir_rx_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ir_rx_avalon_slave_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ir_rx_avalon_slave_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ir_rx_avalon_slave_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ir_rx_avalon_slave_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ir_rx_avalon_slave_agent_m0_lock),                                //                .lock
		.m0_readdata             (ir_rx_avalon_slave_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ir_rx_avalon_slave_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ir_rx_avalon_slave_agent_m0_read),                                //                .read
		.m0_waitrequest          (ir_rx_avalon_slave_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ir_rx_avalon_slave_agent_m0_writedata),                           //                .writedata
		.m0_write                (ir_rx_avalon_slave_agent_m0_write),                               //                .write
		.rp_endofpacket          (ir_rx_avalon_slave_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ir_rx_avalon_slave_agent_rp_ready),                               //                .ready
		.rp_valid                (ir_rx_avalon_slave_agent_rp_valid),                               //                .valid
		.rp_data                 (ir_rx_avalon_slave_agent_rp_data),                                //                .data
		.rp_startofpacket        (ir_rx_avalon_slave_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                             //                .channel
		.rf_sink_ready           (ir_rx_avalon_slave_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ir_rx_avalon_slave_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ir_rx_avalon_slave_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ir_rx_avalon_slave_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ir_rx_avalon_slave_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ir_rx_avalon_slave_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ir_rx_avalon_slave_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ir_rx_avalon_slave_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (ir_rx_avalon_slave_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ir_rx_avalon_slave_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ir_rx_avalon_slave_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ir_rx_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ir_rx_avalon_slave_agent_rf_source_data),                         //        in.data
		.in_valid          (ir_rx_avalon_slave_agent_rf_source_valid),                        //          .valid
		.in_ready          (ir_rx_avalon_slave_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ir_rx_avalon_slave_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ir_rx_avalon_slave_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ir_rx_avalon_slave_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ir_rx_avalon_slave_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ir_rx_avalon_slave_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                                         //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                                      //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                                      //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                                     //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                            //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                                        //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                                   //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                            //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                                     //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                                       //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                           //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                                     //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                           //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                           //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                            //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                                   //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                         //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                                 //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                                 //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),                         //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                           //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                                  //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                                    //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                                    //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                            //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                              //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                               //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                                //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                                     //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                                    //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                                    //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                            //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                              //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                                  //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                                 //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                                 //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),                         //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                           //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) esp32_io_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (esp32_io_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (esp32_io_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (esp32_io_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (esp32_io_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (esp32_io_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (esp32_io_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (esp32_io_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (esp32_io_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (esp32_io_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (esp32_io_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (esp32_io_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (esp32_io_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (esp32_io_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (esp32_io_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (esp32_io_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (esp32_io_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                         //                .channel
		.rf_sink_ready           (esp32_io_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (esp32_io_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (esp32_io_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (esp32_io_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (esp32_io_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (esp32_io_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (esp32_io_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (esp32_io_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (esp32_io_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (esp32_io_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (esp32_io_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (esp32_io_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (esp32_io_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) esp32_io_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (esp32_io_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (esp32_io_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (esp32_io_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (esp32_io_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (esp32_io_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (esp32_io_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (esp32_io_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (esp32_io_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (esp32_io_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (esp32_io_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                                          //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                                       //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                                       //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                                      //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                                             //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                                         //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                                    //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                                             //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                                      //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                                        //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                                            //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                                      //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                                            //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                                            //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                                             //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                                    //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                                  //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                                  //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),                          //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),                            //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                                   //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                                     //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                                     //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),                             //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),                               //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),                                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),                                //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),                                 //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                                      //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                                     //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                                     //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),                             //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),                               //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                                   //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                                  //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                                  //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),                          //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),                            //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_ltc2308_0_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (adc_ltc2308_0_slave_agent_m0_address),                            //              m0.address
		.m0_burstcount           (adc_ltc2308_0_slave_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (adc_ltc2308_0_slave_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (adc_ltc2308_0_slave_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (adc_ltc2308_0_slave_agent_m0_lock),                               //                .lock
		.m0_readdata             (adc_ltc2308_0_slave_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (adc_ltc2308_0_slave_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (adc_ltc2308_0_slave_agent_m0_read),                               //                .read
		.m0_waitrequest          (adc_ltc2308_0_slave_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (adc_ltc2308_0_slave_agent_m0_writedata),                          //                .writedata
		.m0_write                (adc_ltc2308_0_slave_agent_m0_write),                              //                .write
		.rp_endofpacket          (adc_ltc2308_0_slave_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (adc_ltc2308_0_slave_agent_rp_ready),                              //                .ready
		.rp_valid                (adc_ltc2308_0_slave_agent_rp_valid),                              //                .valid
		.rp_data                 (adc_ltc2308_0_slave_agent_rp_data),                               //                .data
		.rp_startofpacket        (adc_ltc2308_0_slave_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                         //                .channel
		.rf_sink_ready           (adc_ltc2308_0_slave_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (adc_ltc2308_0_slave_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (adc_ltc2308_0_slave_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (adc_ltc2308_0_slave_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (adc_ltc2308_0_slave_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (adc_ltc2308_0_slave_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (adc_ltc2308_0_slave_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (adc_ltc2308_0_slave_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (adc_ltc2308_0_slave_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (adc_ltc2308_0_slave_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (adc_ltc2308_0_slave_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_ltc2308_0_slave_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (adc_ltc2308_0_slave_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_ltc2308_0_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_ltc2308_0_slave_agent_rf_source_data),                        //        in.data
		.in_valid          (adc_ltc2308_0_slave_agent_rf_source_valid),                       //          .valid
		.in_ready          (adc_ltc2308_0_slave_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (adc_ltc2308_0_slave_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (adc_ltc2308_0_slave_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (adc_ltc2308_0_slave_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (adc_ltc2308_0_slave_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (adc_ltc2308_0_slave_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (adc_ltc2308_0_slave_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (adc_ltc2308_0_slave_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	Qsys_mm_interconnect_3_router router (
		.sink_ready         (mm_clock_crossing_bridge_0_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_0_m0_agent_cp_valid),                    //          .valid
		.sink_data          (mm_clock_crossing_bridge_0_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	Qsys_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (ir_rx_avalon_slave_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ir_rx_avalon_slave_agent_rp_valid),                               //          .valid
		.sink_data          (ir_rx_avalon_slave_agent_rp_data),                                //          .data
		.sink_startofpacket (ir_rx_avalon_slave_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ir_rx_avalon_slave_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (led_s1_agent_rp_ready),                                           //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                           //          .valid
		.sink_data          (led_s1_agent_rp_data),                                            //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_router_001 router_003 (
		.sink_ready         (esp32_io_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (esp32_io_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (esp32_io_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (esp32_io_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (esp32_io_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_router_001 router_004 (
		.sink_ready         (sw_s1_agent_rp_ready),                                            //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                                            //          .valid
		.sink_data          (sw_s1_agent_rp_data),                                             //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                            //       src.ready
		.src_valid          (router_004_src_valid),                                            //          .valid
		.src_data           (router_004_src_data),                                             //          .data
		.src_channel        (router_004_src_channel),                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_router_001 router_005 (
		.sink_ready         (adc_ltc2308_0_slave_agent_rp_ready),                              //      sink.ready
		.sink_valid         (adc_ltc2308_0_slave_agent_rp_valid),                              //          .valid
		.sink_data          (adc_ltc2308_0_slave_agent_rp_data),                               //          .data
		.sink_startofpacket (adc_ltc2308_0_slave_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (adc_ltc2308_0_slave_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                            //       src.ready
		.src_valid          (router_005_src_valid),                                            //          .valid
		.src_data           (router_005_src_data),                                             //          .data
		.src_channel        (router_005_src_channel),                                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (48),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_clock_crossing_bridge_0_m0_limiter (
		.clk                    (clk_0_clk_clk),                                                   //       clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //          .valid
		.cmd_sink_data          (router_src_data),                                                 //          .data
		.cmd_sink_channel       (router_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	Qsys_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                   //        clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                       //           .endofpacket
	);

	Qsys_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                           //          .valid
		.src_data            (cmd_mux_003_src_data),                                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                           //          .valid
		.src_data            (cmd_mux_004_src_data),                                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                            //      sink.ready
		.sink_channel       (router_001_src_channel),                                          //          .channel
		.sink_data          (router_001_src_data),                                             //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_001_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                       //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //      sink.ready
		.sink_channel       (router_002_src_channel),                                          //          .channel
		.sink_data          (router_002_src_data),                                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                            //      sink.ready
		.sink_channel       (router_003_src_channel),                                          //          .channel
		.sink_data          (router_003_src_data),                                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                   //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                            //      sink.ready
		.sink_channel       (router_004_src_channel),                                          //          .channel
		.sink_data          (router_004_src_data),                                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                   //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                            //      sink.ready
		.sink_channel       (router_005_src_channel),                                          //          .channel
		.sink_data          (router_005_src_data),                                             //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_005_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                   //          .endofpacket
	);

	Qsys_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //          .valid
		.src_data            (rsp_mux_src_data),                                                //          .data
		.src_channel         (rsp_mux_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.sink0_data          (rsp_demux_src0_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                        //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                         //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                        //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                         //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                        //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                         //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                  //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                        //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                         //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                                   //          .endofpacket
	);

	Qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ir_rx_avalon_slave_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (ir_rx_avalon_slave_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (ir_rx_avalon_slave_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	Qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                                //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                               //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                               //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	Qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (esp32_io_s1_agent_rdata_fifo_src_data),                           //     in_0.data
		.in_0_valid     (esp32_io_s1_agent_rdata_fifo_src_valid),                          //         .valid
		.in_0_ready     (esp32_io_s1_agent_rdata_fifo_src_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                //         .error
	);

	Qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_src_data),                                 //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_src_valid),                                //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_src_ready),                                //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                //         .error
	);

	Qsys_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_ltc2308_0_slave_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (adc_ltc2308_0_slave_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (adc_ltc2308_0_slave_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                //         .error
	);

endmodule
